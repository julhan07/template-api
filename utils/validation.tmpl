package utils

import (
	"fmt"
	"strings"
	"unicode"

	"github.com/go-playground/validator/v10"
	"github.com/jackc/pgconn"
)

// ValidationErrorsToJSON converts validation errors to JSON field names and messages
func CamelToSnake(s string) string {
	var result []rune
	for i, r := range s {
		if unicode.IsUpper(r) {
			if i > 0 {
				result = append(result, '_')
			}
			result = append(result, unicode.ToLower(r))
		} else {
			result = append(result, r)
		}
	}
	return string(result)
}

// ValidationErrorsToJSON converts validation errors to JSON field names and messages
func ValidationErrorsToJSON(err error) []string {
	var errors []string
	for _, err := range err.(validator.ValidationErrors) {
		jsonTag := CamelToSnake(err.Field())
		fmt.Println("json tag", jsonTag)
		errors = append(errors, jsonTag+" is "+err.Tag())
	}
	return errors
}

func GetColumnNameFromPgError(err error) (columnName string, found bool) {
	if pgErr, ok := err.(*pgconn.PgError); ok {
		if pgErr.Code == "23505" {
			// Example error message: duplicate key value violates unique constraint "tb_user_email_key"
			msg := pgErr.Message
			// Extracting column name between quotes after the last dot
			idx := strings.LastIndex(msg, ".\"")
			if idx != -1 {
				msg = msg[idx+len(".\""):]
			}
			idx = strings.LastIndex(msg, "\"")
			if idx != -1 {
				columnName = msg[:idx]
				found = true
			}
		}
	}
	return columnName, found
}
