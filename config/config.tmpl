package config

import (
	"log"
	"strconv"
	"time"

	"github.com/joho/godotenv"
	"{{.PackagePath}}/app/http/middleware"
	"{{.PackagePath}}/pkg"
)

type Config struct {
	AppVersion    string
	AppPort       string
	AppHost       string
	Pgx           pkg.PgxConnection
	Redis         pkg.Redis
	JwtCredential middleware.JwtCredential
	StaticPath    string
}

func InitConfig() (conf Config, err error) {

	envConf, err := godotenv.Read("./.env")
	if err != nil {
		log.Fatal("Error loading ..env file")
	}

	conf.AppVersion = envConf["APP_VERSION"]
	conf.AppPort = envConf["APP_PORT"]
	conf.AppHost = envConf["APP_HOST"]

	// db
	portPgx, err := strconv.Atoi(envConf["DB_PORT"])
	if err != nil {
		return conf, err
	}
	conf.Pgx = pkg.PgxConnection{
		Host:         envConf["DB_HOST"],
		Port:         portPgx,
		User:         envConf["DB_USER"],
		Password:     envConf["DB_PASSWORD"],
		DatabaseName: envConf["DB_NAME"],
		SslMode:      envConf["DB_SSL_MODE"],
	}

	// redis
	redisPort, err := strconv.Atoi(envConf["REDIS_PORT"])
	if err != nil {
		return conf, err
	}

	redisClient, err := pkg.NewRedis(pkg.ConfRedis{
		Host:     envConf["REDIS_HOST"],
		Port:     redisPort,
		Password: envConf["REDIS_PASSWORD"],
	})
	conf.Redis = *redisClient

	conf.StaticPath = envConf["STATIC_PATH"]

	jwtExpAt, _ := strconv.Atoi(envConf["JWT_EXPIRED_AT"])
	jwtExpRt, _ := strconv.Atoi(envConf["JWT_EXPIRED_RT"])

	conf.JwtCredential = middleware.JwtCredential{
		SecretAtKey:    envConf["JWT_AT_KEY"],
		SecretRtKey:    envConf["JWT_RT_KEY"],
		ExpiredAcToken: time.Duration(jwtExpAt),
		ExpiredRtToken: time.Duration(jwtExpRt),
	}

	return
}
