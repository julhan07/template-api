package repository

import (
	"context"
	"time"
	"fmt"
	
	"github.com/jackc/pgx/v4"
	"{{.PackagePath}}/app/interfaces"
	"{{.PackagePath}}/app/http/models"
	"{{.PackagePath}}/utils"
	"{{.PackagePath}}/pkg"
)

type {{.Name}}Repository struct {
	pgx   pkg.Pgx
	model *models.{{.Name}}
}

func New{{.Name}}Repository(pgx pkg.Pgx, model *models.{{.Name}}) interfaces.{{.Name}}Repository {
	return &{{.Name}}Repository{pgx, model}
}

func (repo *{{.Name}}Repository) scan(row pgx.Row) (res models.{{.Name}}, err error) {
	if err = row.Scan(&res.ID,{{- range .ModelField}} &res.{{.Name}}, {{- end}} &res.CreatedAt, &res.UpdatedAt); err != nil {
		return res, err
	}
	return res, err
}

{{- if eq .LowerName "menu" }}
func (repo *{{.Name}}Repository) scanMenuView(row pgx.Row) (res models.MenuView, err error) {
	if err = row.Scan(&res.ID, &res.Name, &res.Code, &res.UrlPath, &res.Icon, &res.Actions); err != nil {
		return res, err
	}
	return res, err
}
{{- end }}

func (repo *{{.Name}}Repository) Create(ctx context.Context, {{.LowerName}} *models.{{.Name}}, tx pgx.Tx) (res int, err error) {
	err = repo.pgx.QueryRow(ctx, tx, repo.model.QueryInsert(),{{- range .ModelField}} {{- if not .AliasName}} {{$.LowerName}}.{{.Name}},{{ end }} {{- end}} time.Now().Unix(), time.Now().Unix()).Scan(&res)
	if err != nil {
		msg, ok := utils.GetColumnNameFromPgError(err)
		if ok {
			return res, fmt.Errorf("%v", msg)
		}
		return res, err
	}
	return
}

func (repo *{{.Name}}Repository) FindAll(ctx context.Context) (res []models.{{.Name}}, err error) {
	rows, err := repo.pgx.QueryRows(ctx, nil, repo.model.QueryGetAll())
	if err != nil {
		return res, err
	}
	for rows.Next() {
		{{.LowerName}}, err := repo.scan(rows)
		if err != nil {
			return res, err
		}
		res = append(res, {{.LowerName}})
	}
	return
}

func (repo *{{.Name}}Repository) FindByID(ctx context.Context, id uint) (res models.{{.Name}}, err error) {
	row := repo.pgx.QueryRow(ctx, nil, repo.model.QueryGetByID(), id)
	return repo.scan(row)
}

{{- if eq .LowerName "menu" }}
func (repo *MenuRepository) FindRoleMenu(ctx context.Context, id uint) (res []models.MenuView, err error) {
	rows, err := repo.pgx.QueryRows(ctx, nil, models.GetRoleMenuSqlCMD(int(id)))
	if err != nil {
		return res, err
	}
	for rows.Next() {
		menu, err := repo.scanMenuview(rows)
		if err != nil {
			return res, err
		}
		res = append(res, menu)
	}
	return
}
{{- end }}

func (repo *{{.Name}}Repository) FindByKeyAndValue(ctx context.Context, key, value interface{}) (res models.{{.Name}}, err error) {
	row := repo.pgx.QueryRow(ctx, nil, repo.model.QueryGetAll()+fmt.Sprintf(" AND %v='%v'", key, value))
	return repo.scan(row)
}

func (repo *{{.Name}}Repository) Update(ctx context.Context, {{.LowerName}} *models.{{.Name}}) (res int, err error) {
	if err = repo.pgx.QueryRow(ctx, nil, repo.model.QueryUpdate(), {{- range .ModelField}} {{- if not .AliasName}} {{$.LowerName}}.{{.Name}},{{ end }}{{- end}}  time.Now().Unix(), {{.LowerName}}.ID).Scan(&res); err != nil {
		return 0, err
	}
	return
}

func (repo *{{.Name}}Repository) Delete(ctx context.Context, id uint) (res int, err error) {
	if err = repo.pgx.QueryRow(ctx, nil, repo.model.QueryDelete(), id).Scan(&res); err != nil {
		return 0, err
	}
	return
}
