package repository

import (
	"context"
	"fmt"
	"time"

	"{{.PackagePath}}/app/http/models"
	"{{.PackagePath}}/app/interfaces"
	"{{.PackagePath}}/pkg"
	"{{.PackagePath}}/utils"

	"github.com/jackc/pgx/v4"
)

type UserRepository struct {
	pgx   pkg.Pgx
	model *models.User
}

func NewUserRepository(pgx pkg.Pgx, model *models.User) interfaces.UserRepository {
	return &UserRepository{pgx, model}
}

func (repo *UserRepository) scan(row pgx.Row) (res models.User, err error) {
	if err = row.Scan(&res.ID, &res.FullName, &res.Email, &res.Password, &res.Status, &res.EmailVerification, &res.Roles, &res.LastLoginAt, &res.Phone, &res.PhoneVerification, &res.CreatedAt, &res.UpdatedAt); err != nil {
		return res, err
	}
	return res, err
}

func (repo *UserRepository) Create(ctx context.Context, user *models.User, tx pgx.Tx) (res int, err error) {
	err = repo.pgx.QueryRow(ctx, tx, repo.model.QueryInsert(), user.FullName, user.Email, user.Password, user.Status, user.EmailVerification, user.RoleIDs, 0, user.Phone, user.PhoneVerification, time.Now().Unix(), time.Now().Unix()).Scan(&res)
	if err != nil {
		msg, ok := utils.GetColumnNameFromPgError(err)
		if ok {
			return res, fmt.Errorf("%v", msg)
		}
		return res, err
	}
	return
}

func (repo *UserRepository) FindAll(ctx context.Context) (res []models.User, err error) {
	rows, err := repo.pgx.QueryRows(ctx, nil, repo.model.QueryGetAll()+" GROUP BY tb_user.id")
	if err != nil {
		return res, err
	}
	for rows.Next() {
		user, err := repo.scan(rows)
		if err != nil {
			return res, err
		}
		user.Password = ""
		res = append(res, user)
	}
	return
}

func (repo *UserRepository) Find(ctx context.Context, meta *models.Pagination) (res []models.User, count int64, err error) {
	rows, err := repo.pgx.QueryRows(ctx, nil, repo.model.QueryGetWithPagination(meta))
	if err != nil {
		return res, count, err
	}
	for rows.Next() {
		user, err := repo.scan(rows)
		if err != nil {
			return res, count, err
		}
		user.Password = ""
		res = append(res, user)
	}

	err = repo.pgx.QueryRow(ctx, nil, repo.model.QueryCount()).Scan(&count)
	if err != nil {
		return res, count, err
	}
	return
}

func (repo *UserRepository) FindByID(ctx context.Context, id uint) (res models.User, err error) {
	row := repo.pgx.QueryRow(ctx, nil, repo.model.QueryGetByID(), id)
	return repo.scan(row)
}

func (repo *UserRepository) FindByKeyAndValue(ctx context.Context, key, value interface{}) (res models.User, err error) {
	row := repo.pgx.QueryRow(ctx, nil, repo.model.QueryGetAll()+fmt.Sprintf(" AND %v='%v' GROUP BY tb_user.id", key, value))
	return repo.scan(row)
}

func (repo *UserRepository) Update(ctx context.Context, user *models.User) (res int, err error) {
	for _, v := range user.Roles {
		user.RoleIDs = append(user.RoleIDs, int(v.ID))
	}
	if err = repo.pgx.QueryRow(ctx, nil, repo.model.QueryUpdate(), user.FullName, user.Email, user.Password, user.Status, user.EmailVerification, user.RoleIDs, user.LastLoginAt, user.Phone, user.PhoneVerification, time.Now().Unix(), user.ID).Scan(&res); err != nil {
		return 0, err
	}
	return
}

func (repo *UserRepository) Delete(ctx context.Context, id uint) (res int, err error) {
	if err = repo.pgx.QueryRow(ctx, nil, repo.model.QueryDelete(), id).Scan(&res); err != nil {
		return 0, err
	}
	return
}
