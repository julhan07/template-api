package models

import (
	"fmt"
	"strings"
)

type User struct {
	ID                uint       `json:"id"`
	FullName          string     `json:"full_name" validate:"required"`
	Email             string     `json:"email" validate:"required,email"`
	Phone             string     `json:"phone" validate:""`
	Password          string     `json:"password" validate:""`
	Status            bool       `json:"status" validate:""`
	EmailVerification bool       `json:"email_verification" validate:""`
	PhoneVerification bool       `json:"phone_verification" validate:""`
	RoleIDs           []int      `json:"role_ids,omitempty" validate:"required"`
	Roles             []RoleView `json:"roles" validate:""`
	LastLoginAt       int        `json:"last_login_at" validate:""`
	CreatedAt         int        `json:"created_at"`
	UpdatedAt         int        `json:"updated_at"`
	DeletedAt         int        `json:"deleted_at,omitempty"`
}

func (m *User) TableName() string {
	return "tb_user"
}

func (m *User) JoinClause() string {
	joins := []string{}
	joins = append(joins, fmt.Sprintf("LEFT JOIN LATERAL jsonb_array_elements_text(%s.%s) AS %v ON true", "tb_user", "role_ids", "role_id"))
	joins = append(joins, fmt.Sprintf("LEFT JOIN %s ON tb_role.%s = %s::int", "tb_role", "id", "role_id"))
	return strings.Join(joins, " ")
}

func (m *User) QueryInsert() string {
	fields := []string{}
	values := []string{}
	valueIndex := 1
	fields = append(fields, "full_name")
	values = append(values, fmt.Sprintf("$%d", valueIndex))
	valueIndex++
	fields = append(fields, "email")
	values = append(values, fmt.Sprintf("$%d", valueIndex))
	valueIndex++
	fields = append(fields, "password")
	values = append(values, fmt.Sprintf("$%d", valueIndex))
	valueIndex++
	fields = append(fields, "status")
	values = append(values, fmt.Sprintf("$%d", valueIndex))
	valueIndex++
	fields = append(fields, "email_verification")
	values = append(values, fmt.Sprintf("$%d", valueIndex))
	valueIndex++
	fields = append(fields, "role_ids")
	values = append(values, fmt.Sprintf("$%d", valueIndex))
	valueIndex++
	fields = append(fields, "last_login_at")
	values = append(values, fmt.Sprintf("$%d", valueIndex))
	valueIndex++
	fields = append(fields, "phone")
	values = append(values, fmt.Sprintf("$%d", valueIndex))
	valueIndex++
	fields = append(fields, "phone_verification")
	values = append(values, fmt.Sprintf("$%d", valueIndex))
	valueIndex++

	// Tambahkan created_at dan updated_at ke fields
	fields = append(fields, "created_at", "updated_at")

	// Tambahkan placeholder untuk created_at dan updated_at ke values
	values = append(values, fmt.Sprintf("$%d", valueIndex), fmt.Sprintf("$%d", valueIndex+1))

	// Kembalikan query INSERT dengan fields dan values
	return fmt.Sprintf("INSERT INTO %s (%s) VALUES (%s) RETURNING id", m.TableName(), strings.Join(fields, ", "), strings.Join(values, ", "))
}

func (m *User) QueryGetAll() string {
	fields := []string{"tb_user.id", "tb_user.full_name", "tb_user.email", "tb_user.password", "tb_user.status", "tb_user.email_verification", `COALESCE(
        jsonb_agg(
            jsonb_build_object(
                'id', tb_role.id,
                'name', tb_role."name",
                'code', tb_role."code")
        ) FILTER (WHERE tb_role.id IS NOT NULL), '[]'
    ) AS roles`, "tb_user.last_login_at", "tb_user.phone", "tb_user.phone_verification", "tb_user.created_at", "tb_user.updated_at"}
	return fmt.Sprintf("SELECT %s FROM %s %s WHERE tb_user.deleted_at IS NULL", strings.Join(fields, ", "), m.TableName(), m.JoinClause())
}

func (m *User) QueryGetWithPagination(meta *Pagination) string {
	fields := []string{"tb_user.id", "tb_user.full_name", "tb_user.email", "tb_user.password", "tb_user.status", "tb_user.email_verification", `COALESCE(
        jsonb_agg(
            jsonb_build_object(
               'id', tb_role.id,
                'name', tb_role."name",
                'code', tb_role."code")  
			) FILTER (WHERE tb_role.id IS NOT NULL), '[]'
    ) AS roles`, "tb_user.last_login_at", "tb_user.phone", "tb_user.phone_verification", "tb_user.created_at", "tb_user.updated_at"}
	query := fmt.Sprintf("SELECT %s FROM %s %s WHERE tb_user.deleted_at IS NULL", strings.Join(fields, ", "), m.TableName(), m.JoinClause())

	query += fmt.Sprintf(" GROUP BY tb_user.id ORDER BY tb_user.%v %v LIMIT %d OFFSET %d  ", meta.SortBy, meta.Order, meta.Limit, meta.Offset)

	return query
}

func (m *User) QueryGetByID() string {
	fields := []string{"tb_user.id", "tb_user.full_name", "tb_user.email", "tb_user.password", "tb_user.status", "tb_user.email_verification", `COALESCE(
        jsonb_agg(
            jsonb_build_object(
               	'id', tb_role.id,
                'name', tb_role."name",
                 'code', tb_role."code")
		) FILTER (WHERE tb_role.id IS NOT NULL), '[]'
    ) AS roles`, "tb_user.last_login_at", "tb_user.phone", "tb_user.phone_verification", "tb_user.created_at", "tb_user.updated_at"}
	return fmt.Sprintf("SELECT %s FROM %s %s WHERE tb_user.deleted_at IS NULL AND tb_user.id = $1 GROUP BY tb_user.id", strings.Join(fields, ", "), m.TableName(), m.JoinClause())
}

func (m *User) QueryUpdate() string {
	setFields := []string{}
	valueIndex := 1
	setFields = append(setFields, fmt.Sprintf("%s = $%d", "full_name", valueIndex))
	valueIndex++
	setFields = append(setFields, fmt.Sprintf("%s = $%d", "email", valueIndex))
	valueIndex++
	setFields = append(setFields, fmt.Sprintf("%s = $%d", "password", valueIndex))
	valueIndex++
	setFields = append(setFields, fmt.Sprintf("%s = $%d", "status", valueIndex))
	valueIndex++
	setFields = append(setFields, fmt.Sprintf("%s = $%d", "email_verification", valueIndex))
	valueIndex++
	setFields = append(setFields, fmt.Sprintf("%s = $%d", "role_ids", valueIndex))
	valueIndex++
	setFields = append(setFields, fmt.Sprintf("%s = $%d", "last_login_at", valueIndex))
	valueIndex++
	setFields = append(setFields, fmt.Sprintf("%s = $%d", "phone", valueIndex))
	valueIndex++
	setFields = append(setFields, fmt.Sprintf("%s = $%d", "phone_verification", valueIndex))
	valueIndex++

	setFields = append(setFields, "updated_at = $"+fmt.Sprintf("%d", valueIndex))

	return fmt.Sprintf("UPDATE %s SET %s WHERE id = $%d RETURNING id", m.TableName(), strings.Join(setFields, ", "), valueIndex+1)
}

func (m *User) QueryDelete() string {
	return fmt.Sprintf("DELETE FROM %s WHERE id = $1 AND tb_user.deleted_at IS NULL", m.TableName()) + " RETURNING id"
}

func (m *User) QueryCount() string {
	return fmt.Sprintf("SELECT COUNT(*) FROM %s WHERE tb_user.deleted_at IS NULL", m.TableName())
}
