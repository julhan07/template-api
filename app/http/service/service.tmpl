package service

import (
	"context"
	"net/http"

	"github.com/jackc/pgx/v4"
	"{{.PackagePath}}/app/http/models"
	"{{.PackagePath}}/app/interfaces"
	command "github.com/julhan07/go-kampasi-command"
)

type {{.Name}}Service struct {
	repo interfaces.{{.Name}}Repository
}

func New{{.Name}}Service(repo interfaces.{{.Name}}Repository) interfaces.{{.Name}}Service {
	return &{{.Name}}Service{
		repo: repo,
	}
}

func (s *{{.Name}}Service) Create(ctx context.Context, {{.LowerName}} *models.{{.Name}}, tx pgx.Tx) *command.Response {
	res, err := s.repo.Create(ctx, {{.LowerName}}, tx)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	return command.NewSuccessResponse(http.StatusCreated, res)
}

func (s *{{.Name}}Service) Find(ctx context.Context, meta *models.Pagination) *command.Response {
	res, count, err := s.repo.Find(ctx, meta)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}

	meta.Total = int(count)
	metaPagination := meta.ParseMeta()

	return command.NewSuccessWithMetaResponse(http.StatusOK, res, metaPagination)
}

func (s *{{.Name}}Service) FindAll(ctx context.Context) *command.Response {
	res, err := s.repo.FindAll(ctx)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	return command.NewSuccessResponse(http.StatusOK, res)
}

func (s *{{.Name}}Service) GetByID(cxt context.Context, id uint) *command.Response {
	res, err := s.repo.FindByID(cxt, id)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	return command.NewSuccessResponse(http.StatusOK, res)
}

func (s *{{.Name}}Service) Update(ctx context.Context, {{.LowerName}} *models.{{.Name}}, tx pgx.Tx) *command.Response {
	res, err := s.repo.Update(ctx, {{.LowerName}})
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	return command.NewSuccessResponse(http.StatusOK, res)

}

func (s *{{.Name}}Service) Delete(ctx context.Context, id uint) *command.Response {
	res, err := s.repo.Delete(ctx, id)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	return command.NewSuccessResponse(http.StatusOK, res)
}
