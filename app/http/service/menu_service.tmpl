package service

import (
	"context"
	"fmt"
	"net/http"

	"{{.PackagePath}}/app/http/models"
	"{{.PackagePath}}/app/interfaces"
	"{{.PackagePath}}/pkg"

	"github.com/jackc/pgx/v4"
	command "github.com/julhan07/go-kampasi-command"
)

type MenuService struct {
	repo  interfaces.MenuRepository
	redis pkg.Redis
}

func NewMenuService(repo interfaces.MenuRepository, redis pkg.Redis) interfaces.MenuService {
	return &MenuService{
		repo:  repo,
		redis: redis,
	}
}

func (s *MenuService) Create(ctx context.Context, menu *models.Menu, tx pgx.Tx) *command.Response {
	res, err := s.repo.Create(ctx, menu, tx)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	return command.NewSuccessResponse(http.StatusCreated, res)
}

func (s *MenuService) FindAll(ctx context.Context) *command.Response {
	res, err := s.repo.FindAll(ctx)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	return command.NewSuccessResponse(http.StatusOK, res)
}

func (s *MenuService) GetByID(cxt context.Context, id uint) *command.Response {
	res, err := s.repo.FindByID(cxt, id)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	return command.NewSuccessResponse(http.StatusOK, res)
}

func (s *MenuService) GetMenuByRoleID(cxt context.Context, id uint) *command.Response {
	res, err := s.repo.FindRoleMenu(cxt, id)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}

	if err := s.redis.SaveDataToRedis(fmt.Sprintf("menu_list_role_id:%d", id), res, 0); err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	fmt.Println("success save menu to redis")

	return command.NewSuccessResponse(http.StatusOK, res)
}

func (s *MenuService) Update(ctx context.Context, menu *models.Menu, tx pgx.Tx) *command.Response {
	res, err := s.repo.Update(ctx, menu)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	return command.NewSuccessResponse(http.StatusOK, res)

}

func (s *MenuService) Delete(ctx context.Context, id uint) *command.Response {
	res, err := s.repo.Delete(ctx, id)
	if err != nil {
		return command.NewErrorResponse(http.StatusBadGateway, err.Error())
	}
	return command.NewSuccessResponse(http.StatusOK, res)
}
