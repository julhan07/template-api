package handlers

import (
	"net/http"
	"strings"

	"{{.PackagePath}}/app/http/models"
	"{{.PackagePath}}/app/interfaces"
	"{{.PackagePath}}/utils"

	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
	command "github.com/julhan07/go-kampasi-command"
)

type ProfileHandler struct {
	service     interfaces.UserService
	menuService interfaces.MenuService
	validate    *validator.Validate
}

func NewProfileHandler(service interfaces.UserService, menuService interfaces.MenuService, validate *validator.Validate) interfaces.ProfileHandler {
	return &ProfileHandler{
		service:     service,
		menuService: menuService,
		validate:    validate,
	}
}

func (h *ProfileHandler) FindMe(c *fiber.Ctx) error {
	me := c.Locals("metadata").(models.MetaDataUser)
	resp := h.service.GetByID(c.Context(), uint(me.ID))
	respMenu := h.menuService.GetMenuByRoleID(c.Context(), me.RoleID)
	respApi := map[string]interface{}{
		"user_info": resp.Data,
		"menu_list": respMenu.Data,
	}
	return c.Status(resp.Status).JSON(command.NewSuccessResponse(http.StatusOK, respApi))
}

func (h *ProfileHandler) UpdateMe(c *fiber.Ctx) error {
	me := c.Locals("metadata").(models.MetaDataUser)
	respByID := h.service.GetByID(c.Context(), uint(me.ID))
	if respByID.Status != fiber.StatusOK {
		return c.Status(respByID.Status).JSON(respByID.Message)
	}

	user := respByID.Data.(models.User)
	if err := c.BodyParser(&user); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}

	// Validate the user struct
	if err := h.validate.Struct(&user); err != nil {
		errors := utils.ValidationErrorsToJSON(err)
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: strings.Join(errors, ", "),
		})
	}

	resp := h.service.Update(c.Context(), &user, nil)
	return c.Status(resp.Status).JSON(resp)
}
