package handlers

import (
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/go-playground/validator/v10"
	"{{.PackagePath}}/app/http/models"
	"{{.PackagePath}}/app/interfaces"
	"{{.PackagePath}}/utils"
	command "github.com/julhan07/go-kampasi-command"
)

type RoleHandler struct {
	service interfaces.RoleService
	validate *validator.Validate
}

func NewRoleHandler(service interfaces.RoleService, validate *validator.Validate) interfaces.RoleHandler {
	return &RoleHandler{
		service: service,
		validate: validate,
	}
}

func (h *RoleHandler) Create(c *fiber.Ctx) error {
	var role models.Role
	if err := c.BodyParser(&role); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}

	// Validate the role struct
	if err := h.validate.Struct(&role); err != nil {
		errors := utils.ValidationErrorsToJSON(err)
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: strings.Join(errors, ", "),
		})
	}

	resp := h.service.Create(c.Context(), &role, nil)
	return c.Status(resp.Status).JSON(resp)
}

func (h *RoleHandler) FindAll(c *fiber.Ctx) error {
	resp := h.service.FindAll(c.Context())
	return c.Status(resp.Status).JSON(resp)
}

func (h *RoleHandler) GetByID(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}
	resp := h.service.GetByID(c.Context(), uint(id))
	return c.Status(resp.Status).JSON(resp)
}

func (h *RoleHandler) Update(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}
	var role models.Role
	if err := c.BodyParser(&role); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}

	// Validate the role struct
	if err := h.validate.Struct(&role); err != nil {
		errors := utils.ValidationErrorsToJSON(err)
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: strings.Join(errors, ", "),
		})
	}

	role.ID = uint(id)
	resp := h.service.Update(c.Context(), &role, nil)
	return c.Status(resp.Status).JSON(resp)
}

func (h *RoleHandler) Delete(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}
	resp := h.service.Delete(c.Context(), uint(id))
	return c.Status(resp.Status).JSON(resp)
}
