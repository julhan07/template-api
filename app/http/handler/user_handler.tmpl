package handlers

import (
	"strings"

	"{{.PackagePath}}/app/http/models"
	"{{.PackagePath}}/app/interfaces"
	"{{.PackagePath}}/utils"

	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
	command "github.com/julhan07/go-kampasi-command"
)

type UserHandler struct {
	service  interfaces.UserService
	validate *validator.Validate
}

func NewUserHandler(service interfaces.UserService, validate *validator.Validate) interfaces.UserHandler {
	return &UserHandler{
		service:  service,
		validate: validate,
	}
}

func (h *UserHandler) Create(c *fiber.Ctx) error {
	var user models.User
	if err := c.BodyParser(&user); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}

	// Validate the user struct
	if err := h.validate.Struct(&user); err != nil {
		errors := utils.ValidationErrorsToJSON(err)
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: strings.Join(errors, ", "),
		})
	}

	resp := h.service.Create(c.Context(), &user, nil)
	return c.Status(resp.Status).JSON(resp)
}

func (h *UserHandler) Find(c *fiber.Ctx) error {
	meta := new(models.Pagination)
	if err := c.QueryParser(meta); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}

	metaParse := meta.ParseMeta()
	resp := h.service.Find(c.Context(), metaParse)
	return c.Status(resp.Status).JSON(resp)
}

func (h *UserHandler) FindAll(c *fiber.Ctx) error {
	resp := h.service.FindAll(c.Context())
	return c.Status(resp.Status).JSON(resp)
}

func (h *UserHandler) GetByID(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}
	resp := h.service.GetByID(c.Context(), uint(id))
	return c.Status(resp.Status).JSON(resp)
}

func (h *UserHandler) Update(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}
	var user models.User
	if err := c.BodyParser(&user); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}

	// Validate the user struct
	if err := h.validate.Struct(&user); err != nil {
		errors := utils.ValidationErrorsToJSON(err)
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: strings.Join(errors, ", "),
		})
	}

	user.ID = uint(id)
	resp := h.service.Update(c.Context(), &user, nil)
	return c.Status(resp.Status).JSON(resp)
}

func (h *UserHandler) Delete(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(command.Response{
			Status:  fiber.StatusBadRequest,
			Message: err.Error(),
		})
	}
	resp := h.service.Delete(c.Context(), uint(id))
	return c.Status(resp.Status).JSON(resp)
}
